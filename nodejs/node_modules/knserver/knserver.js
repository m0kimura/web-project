var Ks=require('knuty');
//var Cookie=require('cookie');
var Fs=require('fs');
var Http=require('http');
var Url=require('url');
var Qs=require('querystring');

Ks.extend({SS: {}, CON: {},
//
  prologue: function(){},
  epilogue: function(){},
  MAIN: function(proc, op){
    var me=this;
    Ks.Fiber(function(){
      var txt;

      op=op||{}; me.info(); for(var k in op){me.CFG[k]=op[k];}
      op.port=op.port||'8085';
      var l=me.CFG.current.search(/nodejs/); op.data=op.data||me.CFG.current.substr(0, l)+'data';

      me.prologue(me.CFG, me);

      me.Server=Http.createServer(function(req, res){Ks.Fiber(function(){
        var error=true;
        me.sessionIn(req, res, op);
        me.analyzeRequest(req, res);

        switch(me.SS.PATH[1]){
         case 'image': error=me.putFile(res, op.base+'/image/'); break;
         default:
          try{
            txt=proc(me.SS.POST, me.CFG, me.SS, me);
            Fs.writeFileSync(op.data+'/ss_'+me.SS.cid+'.json', JSON.stringify(me.SS), 'utf8');
          }catch(e){
            me.sevierLog('Session File Write Error', e);
            me.infoLog(me.SS);
          }
          if(!txt){txt={rc: 90};}
          res.writeHead(200, {
            "Content-Type": me.ctype(me.modifier('a.txt')), "charset": "utf-8"
          });
          res.end(JSON.stringify(txt));
        }

      }).run();}).listen(op.port);
//
      me.infoLog('サーバーが開始しました。 port:' + op.port);
    }).run();
  },
//
// sessionIn
//
  sessionIn: function(req, res, op, wk){
    var me=this; wk={};

    wk.cookies=me.getCookies(req);

    wk.cid=me.valCookies('cid');
    if(!wk.cid){
      wk.cid=Math.floor(Math.random()*100000000);
    }

    wk.token=Math.floor(Math.random()*100000000)+'/'+Math.floor(Math.random()*10000000);
    me.setCookies('cid', wk.cid); me.setCookies('token', wk.token);

    try{
      me.SS=JSON.parse(Fs.readFileSync(op.data+'/ss_'+wk.cid+'.json', 'utf8'));
      me.SS.cookies=wk.cookies;
    }catch(e){
      me.SS={}; me.SS.saved={};
    }
    me.SS.cid=wk.cid; me.SS.token=wk.token;
  },
//
// analyzeRequest
//
  analyzeRequest: function(req, res){
    var me=this;
    me.SS.URI=Url.parse(req.url);
    var wid=me.ready();
    me.SS.PATH=me.SS.URI.pathname.split('/');
    me.SS.method=req.method; me.SS.headers=req.headers;
    me.SS.POST={};
    if(req.method=='POST'){
      var body = '';
      var wid=Ks.ready(); var data='';
      req.on('readable', function(chunk){data+=req.read();});
      req.on('end', function(){Ks.SS.POST=Qs.parse(data); Ks.post(wid);});
      Ks.wait();
    }
//
    if(me.SS.URI.search){me.SS.POST=Qs.parse(me.SS.URI.search.substr(1));}
//
    if(me.SS.PATH[1]=='cms'){me.SS.Apli=me.SS.PATH[2];}
  },
//
// getCookies
//
  getCookies: function(req){
    var me=this; var key, value, i, x, y, f, out={};

    me.SS.cookies=[]; x=req.headers.cookie; key=''; value=''; f=0;
    
    if(x){
      for(i=0; i<x.length; i++){
        y=x.charAt(i);
        switch(y){
         case ' ': break;
         case ';': out[key]=value; key=''; value=''; f=0; break;
         case '=': f=1; break;
         default: if(f==0){key+=y;}else{value+=y;}
        }
      }
      if(key){out[key]=value;}
    }
    me.SS.cookies=out;
    return out;
  },
//
  setCookies: function(key, value){
    this.SS.cookies[key]=value;
  },
//
  valCookies: function(key){
    return this.SS.cookies[key];
  },
//
  putCookies: function(){
    var me=this; var out=[], x, i, j;
    
    i=0; for(j in me.SS.cookies){
      x='';
      x+=j+'='+me.SS.cookies[j]+';';
      x+='path=/;';
      x+='expires=;';
      out[i]=x;
      i++;
    }
    return out;
  },
//
// ctype コンテンツタイプを拡張子で変換
//
  ctype: function(mdf){
    return {
      'html': 'text/html', 'css': 'text/css', 'js': 'text/javascript', 'txt': 'text/plane',
      'xml': 'text/xml', 
      'png': 'image/png', 'gif': 'image/gif', 'jpg': 'image/jpeg', 'jpeg': 'image/jpeg',
      'ico': 'image/x-icon'
    }[mdf]||'plain/text';
  },
//
// 単純にファイルを転送
//
  putFile: function(res, base){
    var me=this; var i=me.SS.PATH.length-1, path=me.SS.PATH[i];
    Fs.readFile(base+path, function(err, data){
      if(err){
        me.infoLog('404b:'+base+path);
        res.writeHead(404, 'NOT FOUND', {'content-type': 'text/html'});
        res.end();
      }else{
        res.writeHead(200, {
          "Content-Type": me.ctype(me.modifier(base+path)), "charset": "utf-8"
        });
        res.end(data);
      }
    });
  },
//
  closeServer: function(){}
});
module.exports=Ks;
