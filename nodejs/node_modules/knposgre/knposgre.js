//#######1#########2#########3#########4#########5#########6#########7#########8#########9#########0
var Pg=require('pg');
var Kp=require('knuty');
Kp.extend({
  db: {}, Table: '', DbName: '', Sql: '',
//ok
  open: function(op){
    var me=this; op=op||{}; op.user=op.user||'postgres'; op.psw=op.psw||'postgres';
    op.server=op.server||'localhost'; op.port=op.port||''; op.db=op.db||'testdb';
    var conn='tcp://'+op.user+':'+op.psw+'@'+op.server+op.port+'/'+op.db;
    me.DbName=op.db;
    this; var rc;
    me.db=new Pg.Client(conn);
    var wid=me.ready(); me.error='';
    me.db.connect(function(err, db){
      if(err){me.error=err; rc=false;}else{rc='Connect Database';}
      me.post(wid);
    });
    me.wait();
    return rc;
  },
//
// sql SQLの実行
//      (sql文)==>実行結果
  sql: function (ss, sql, wid, rc){
    var me=this; if(typeof(ss)=='object'){sql=ss.Sql;}else{sql=ss; ss={};} this.save=sql; me.error='';
    wid=me.ready();
    me.db.query(sql, function(err, res){
      if(err){me.error=err; rc=false;}else{rc=res;} me.post(wid, rc);
    });
    rc=me.wait(); ss.Res=rc; ss.error=me.error;
    
    return rc;
  },
//
// query SQL文によるデータ検索
//      (ssオブジェクト|sql文)==>結果件数
  query: function (ss, sql, rc, i){ // 照会(SQL文)=>件数 this->rec結果配列[n][name]
    var me=this; if(typeof(ss)=='string'){sql=ss; ss={}; ss.Sql=sql;} rc=me.sql(ss); ss.REC=[];
    if(rc){for(i in rc.rows){ss.REC[i]={}; ss.REC[i]=rc.rows[i];} rc=rc.rows.length;}
    me.REC=ss.REC; return rc;
  },
//
// read 読み込み
//    (ssオブジェクト|テーブル名, {キー: 値}, [項目]
  read: function(ss, keys, items, table, a, item, ln, y, c, sql, k, i, rc){
    if(typeof(ss)=='object'){table=ss.Table;}else{table=ss; ss={}; ss.Table=table; ss.Keys=keys;}
    ln=''; a=''; for(k in ss.Keys){ln+=a+' '+k+" = '"+ss.Keys[k]+"'"; a=' and';}
    if(!items){ss.Items=[]; ss.Items[0]='*';}else{ss.Items=items;}
    y=''; c=''; for(i in ss.Items){y+=c+' '+ss.Items[i]; c=',';}
    i=0;
    sql='select '+y+' from '+table; if(ln){sql+=' where '+ln+';'}
    ss.Sql=sql; rc=this.query(ss); this.Keys=ss.Keys; this.Table=ss.Table;
    return rc;
  },
//ok
  rewrite: function(ss, dt, c, k, ln, a, sql){ // 再書込()=>結果
    var me=this;
    if(ss){dt=ss.REC[0];}else{dt=this.REC[0]; ss={}; ss.Table=me.Table; ss.Keys=me.Keys;}
    sql='update '+ss.Table+' set '; c='';
    for(k in dt){sql+=c+k+" = '"+Kp.escape(dt[k])+"'"; c=', ';}
    ln=''; a=''; for(k in ss.Keys){ln+=a+' '+k+" = '"+ss.Keys[k]+"'"; a=' and';}
    sql+=' where '+ln+';'; ss.Sql=sql;
    return this.sql(ss);
  },
//ok
  insert: function(ss, rt){ // 追加()=>結果
    if(ss){}else{ss={}; ss.REC=this.REC; ss.Table=this.Table; ss.rt=rt;}
    return this.put(ss);
  },
//ok
  put: function(ss, dt, table, sql, c, k, rc, i){
    var me=this; if(typeof(ss)=='string'){table=ss;}else{dt=ss.REC; table=ss.Table;}
    sql=''; c='';
    for(i in dt){
      sql='insert into '+table+' ('; c='';
      for(k in dt[i]){sql+=c+k; c=', ';}
      sql+=") values ("; c='';
      for(k in dt[i]){sql+=c+"'"+Kp.escape(dt[i][k])+"'"; c=', ';}
      sql+=") ";
      if(ss.rt){sql+=' returning '+ss.rt;}
      ss.Sql=sql;
      rc=this.sql(ss); if(!rc){return false;} return rc;
    }
    return true;
  },
//ok
  delete: function(ss, keys, table, ln, a, k){ // 再書込()=>結果
    var me=this; if(typeof(ss)=='object'){table=ss.Table; keys=ss.Keys;}else{table=ss;}
    ln=""; a=""; for(k in keys){ln+=a+k+" = '"+keys[k]+"'"; a=' and ';}
    sql="delete from "+table+" where "+ln;
    this.save=sql;
    return this.sql(sql, ss);
  },
//ok
  begin: function(){return this.sql('begin;');},  
  commit: function(){return this.sql('commit;');},  
  rollback: function(){return this.sql('rollback;');},
//ok
  create: function(ss, items, keys, table){
    if(typeof(ss)=='object'){table=ss.table; items=ss.items; keys=ss.keys;}else{table=ss;}
    var sql='create table '+table+' ('; var tp;
    var c=''; for(k in items){
      if(typeof(items[k])=='number'){tp='varchar('+items[k]+')';}
      else{switch(items[k]){
        case 'num': tp='double precision'; break;
        case 'int': tp='integer'; break;
        case 'text': tp='text'; break;
        default: tp=items[k]
      }}
      sql+=c+k+' '+tp; c=', ';
    }
    sql+=', PRIMARY KEY(';
    c=''; for(var i in keys){sql+=c+keys[i]; c=', ';} sql+='));';
    return this.sql(sql);
  },
//
  drop: function(table){return this.sql('drop table '+table);},
  clear: function(table){return this.sql('truncate table '+table);},
  index: function(table, name, keys, unique){
    if(unique){unique='unique ';}else{unique=''}
    var sql='ceate '+unique+'index '+name+' on '+table+' using btree (';
    var c=''; for(var i in keys){sql+=c+keys[i];} sql+=');';
    return this.sql(sql);
  },
//
//
  items: function(ss){
    var me=this; ss.Data=[]; ss.error='';
    ss.Sql="select column_name as itemname, udt_name as type, character_maximum_length as width ";
    ss.Sql+="from information_schema.columns where table_name = '"+ss.table
    ss.Sql+="' order by ordinal_position";
    if(me.query(ss)){
      return ss.Data.length;
    }else{console.log(me.error);}
    return 0;
  },
//
  listTables: function(ss, scn){
    if(ss){scn=ss.scn;}else{scn=ss; ss={};}
    scn=scn||'public'; ss.Sql="select * from pg_tables where schemaname = '"+scn+"' order by tablename";
    return this.query(ss);
    
  },
//
  listDbs: function(scn){
    scn=scn||'public';
    return this.query("select * from pg_database");
  },
//
  primary: function(table, db){
    if(!db){db=this.DbName;} if(!table){table=this.Table;}
    var sql="select ccu.column_name as COLUMN_NAME";
    sql+=" from information_schema.table_constraints tc,information_schema.constraint_column_usage ccu";
    sql+=" where tc.table_catalog='"+db+"'";
    sql+=" and tc.table_name='"+table+"'";
    sql+=" and tc.constraint_type='PRIMARY KEY'";
    sql+=" and tc.table_catalog=ccu.table_catalog";
    sql+=" and tc.table_schema=ccu.table_schema";
    sql+=" and tc.table_name=ccu.table_name";
    sql+=" and tc.constraint_name=ccu.constraint_name";
    rc=this.sql(sql); var out={};
    for(var i in rc.rows){out[rc.rows[i].column_name]='';}
    return out;
  },
//ok
  backup: function(op){
    var me=this; op=op||{}; op.spec=op.spec||'db';
    if(op.object.substr(0,3)=='tb_'){op.spec='table';}
    if(op.spec=='db'){op.object=op.object||me.DbName;}
  //
    op.path=op.path||'./'; op.to=op.to||op.spec+'_'+op.object+'_'+me.today()+'.pg';
    switch(op.spec){
     case 'db':
      me.shell('pg_dump '+op.object+' > '+op.path+op.to);
      break;
     case 'table':
      me.shell('pg_dump '+me.DbName+' -t '+op.object+' > '+op.path+op.to);
      break;
    }
  },
//
  offline: function(op){
    var me=this; op=op||{}; op.path=op.path||'./';
    op.dbpath=op.dbpath||'/var/lib/postgresql/9.3/main/';
//    me.shell('sudo /etc/init.d/postgresql stop');
    var cmd='tar zcvf '+op.path+'coldbackup_'+me.today()+'.tar.gz '+op.dbpath;
    me.shell(cmd);
//    me.shell('sudo /etc/init.d/postgresql start');
  },
//
  online: function(op){
    var me=this; op=op||{}; op.path=op.path||"~/tmp/backup_postgres/data";
    op.dbpath=op.dbpath||'/var/lib/postgresql/9.3/main/';
    me.sql("select pg_start_backup('date"+me.today()+"')");
    var cmd="rsync -av --delete --exclude=pg_xlog --exclude=postmaster.pid";
    cmd+=" "+op.dbpath+"* "+op.path;
    me.shell(cmd);
    me.sql("SELECT pg_stop_backup()");
  },
//
  recover: function(op){
    var me=this; op=op||{}; op.spec=op.spec||'db'; if(op.spec=='db'){op.object=me.DbName;}
    op.path=op.path||'./'; me.error='';
    if(!op.from){me.error="from file not defined"; return false;}
    me.shell('pg_dump -Fc '+op.object+' > '+op.path+op.from);
  },
//
  loadCsv: function(op){
    op=op||{}; op.csv=op.csv||'load.csv';
    this.getCsv(op.csv);
    var rc, n=0; this.REC.forEach(function(rec){
      rc=this.put(op.table, [rec]); if(!rc){console.log(this.error); return rc;} n++;
    });
    console.log('output '+n); return true;
  },
//ok
  close: function(){
    this.db.end(); return 'Closed';
  }
}, true);
module.exports=Kp;
