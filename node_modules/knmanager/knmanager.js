//#######1#########2#########3#########4#########5#########6#########7#########8#########9#########0
var Km=require('knmongo');
var Forever=require('forever');
var Chipro=require('child_process');
Km.extend({Jobname: 'NONE', Pgname: 'NONE', Child: {},
  L3event: {}, L3wait: {}, L3post: {}, L3continue: false,
//
// CONTROL ジョブの実行管理
//      (手続き, <{実行パラメタ}>)
  CONTROL: function(proc, op){Km.Fiber(function(me){
    Km.L3op=Km.CFG; op=op||{}; for(var k in op){Km.L3op[k]=op[k];}
    Km.prologue(op); proc(me.CFG, me, this); Km.epilogue();
  }).run(this);},
//
// daemon nodejsをデーモンで起動
//      (jsアプリ, <{実行オプション}>, <終了時の処理>
  daemon: function(js, op, epilogue){
    op=op||{}; op.max=op.max||3; op.silent=op.silent||true; op.options=op.options||[];
    var child=new (forever.Monitor)(js, op);
    if(epilogue){child.on('exit', function(){epilogue();});}
    child.start();
  },
//
// exec ジョブステップでのコマンド実行
//      (ジョブステップ, 実行コマンド, <{実行パラメタ}>)
  exec: function(step, cmd, op){
    if(Km.stepChecker(step)){ console.log('skip '+step); return;}
    op=op||{}; for(var k in op){Km.L3op[k]=op[k];}
    var me=this, rc; cmd=me.parm(cmd, me.L3op);
    var a=Km.unstring(cmd); Km.Pgname=a[0]; Km.Stepname=step;
//
    Km.bos(op); rc=me.shell(cmd); Km.eos();
    return rc;
  },
//
// node ジョブステップでのコマンド実行
//      (ジョブステップ, JSプログラム, <{実行パラメタ}>)
  node: function(step, pg, op){
    if(Km.stepChecker(step)){ console.log('skip '+step); return;}
    op=op||{}; for(var k in op){Km.L3op[k]=op[k];}
    var me=this, rc; pg=me.parm(pg, me.L3op);
    Km.Pgname=pg; Km.Stepname=step;
    Km.bos(op);
    var ex=require(me.CFG.directory+pg); ex.start(me.L3op);
    Km.eos();
  },
//
// backup ジョブステップでのバックアップ実行
//      (ジョブステップ, バックアップ対象ファイル, <{実行パラメタ}>)
  backup: function(step, fname, op){
    if(Km.stepChecker(step)){ console.log('skip '+step); return;}
    op=op||{}; for(var k in op){Km.L3op[k]=op[k];}
    var me=this, rc; fname=me.parm(fname, me.CFG);
    Km.Pgname='backup/'+op.type; Km.Stepname=step;
    Km.bos(op);
    switch(op.type){
      case 'zip': me.backupZip(fname); break;
      case 'sync': me.backupSync(fname); break;
      case 's3': me.backupS3(fname); break;
      case 'pdb': me.backupPdb(fname); break;
    }
    Km.eos();
  },
//
// backupZip zipによる前処理バックアップ
//      (対象ファイル, <{オプション}>)
  backupZip: function(fname, op){
    var rc; op=op||{}; if(!this.CFG){this.info();}
    var zf=Km.repby(fname, '/', '_');
    zf=op.zipFile||this.CFG.manager.backupZip+'_'+this.date('YMD-HIS')+zf+'.zip';
    if(Km.isExist(fname)){rc=this.shell('zip -r '+zf+' '+fname);}
    else{rc=1;}
    if(rc==0){Km.infoLog('Backup Zip fname='+fname+' to='+zf); return true;}
    else{Km.errorLog('', 'Backup Zip fname='+fname+' rc='+rc); return false;}
  },
//
// backupSync rsycによる同期バックアップ
//      (対象ファイル, <{オプション}>)
  backupSync: function(dirname, op){
    var rc; op=op||{}; if(!this.CFG){this.info();}
    var syncDir=op.syncDir||this.CFG.manager.backupSync;
    if(Km.isExist(dirname)){rc=this.shell('rsync -avr --delete '+dirname+' '+syncDir);}
    else{rc=1;}
    if(rc==0){Km.infoLog('Backup Sync fname='+dirname); return true;}
    else{Km.errorLog('', 'Backup Sync fname='+dirname); return false;}
  },
//
// backupScp scpによる前処理バックアップ
//      (対象ファイル, <{オプション}>)
  backupScp: function(fname, op){
    var rc; op=op||{}; if(!this.CFG){this.info();}
    var tf=Km.repby(fname, '/', '_');
    tf=op.toFile||this.CFG.manager.backupScp+'_'+this.date('YMD-HIS')+tf;
    if(Km.isExist(fname)){
      rc=this.shell('scp -i '+this.CFG.manager.pem+' -r '+fname+' '+tf);
    }else{rc=1;}
    if(rc==0){Km.infoLog('Backup Scp fname='+fname+' to='+zf); return true;}
    else{Km.errorLog('', 'Backup Scp fname='+fname+' rc='+rc); return false;}
  },
//
// backupS3 S3によるバックアップ
//      (対象ファイル, <{オプション}>)
  backupS3: function(fname, op){
    var me=this; var AWS=require('aws-sdk');
    op.cfg=op.cfg||this.CFG.aws.cfg; AWS.config.loadFromPath(op.cfg);
    var s3=new AWS.S3(); var pm={};
    var stream=require('fs').createReadStream(fname);
    pm.Bucket=this.CFG.manager.bupbucket; pm.Body=stream;
    pm.Key=Km.repby(fname, '/', '_');
    pm.Key=op.toFile||'_'+this.date('YMD-HIS')+pm.Key;
    if(Km.isExist(fname)){
　　  var wid=me.ready();
      s3.putObject(pm, function(err, data) {
        if (err){console.log(err)}
        if(err){rc=false; me.error=err;}else{rc=data;}
        me.post(wid);
      });
      me.wait();
    }else{rc=1;}
    if(rc==0){Km.infoLog('Backup S3 fname='+fname+' to='+pm.Key); return true;}
    else{Km.errorLog('', 'Backup S3 fname='+fname+' rc='+rc); return false;}
  },
//
// backupPdb Postgresデータベースのバックアップ
//      (対象テーブル, オプション)
  backupPdb: function(table, op){
    var me=this; var rc; op=op||{};
    if(!this.CFG){this.info();} var db=op.db||this.CFG.postgres.db;
    bf=op.buckupFile||this.CFG.manager.backupPdb+table+'_'+this.date('YMD-HIS')+'.pg';
    var c='pg_dump '+db+' -t '+table+' > '+bf;
    rc=this.shell(c);
  },
//
// shell シェルコマンドの実行
//      (コマンド)
  shell: function(cmd){
    var me=this; var wout, werr, rc;
    var wid=me.ready();
    var child=Chipro.exec(cmd, function(err, stdout, stderr){
      wout=stdout; werr=stderr;
    });
    child.on('exit', function(code, signal){
      rc=code; child.on('close', function(){me.post(wid);});
    });
    me.wait();
    if(wout){Km.msglogger(wout, 'normal');} if(werr){Km.msglogger(werr, 'error');}
    return rc;
  },
//
// prologue ジョブ開始記録
//    (<{オプション}>)
  prologue: function(op){
    var me=this; op=op||{};
    Km.info(); Km.open(); 
    Km.Jobname=Km.filepart(process.env._);
    if(Km.Jobname=='node'){Km.filepart(Km.Jobname=process.argv[1]);}
    var job=op.job||Km.Jobname;
    var r=Km.putStatus(job, 'boj', op); Km.msglogger(job, '', r);
    if(Km.isDebug){
      console.log(Km.date('Y/M/D H:I:S ###BOJ### ')+job);
    }else{
      Km.sendToParent({mode: 'boj', job: job});
    }
  },
//
// epilogue ジョブ終了記録
//      (<{オプション}>)
  epilogue: function(op){
    op=op||{}; var job=op.job||Km.Jobname;
    var r=Km.putStatus(job, 'eoj'); Km.msglogger(job, '', r);
    if(Km.isDebug){console.log(Km.date('Y/M/D H:I:S ###EOJ### ')+job);}
    else{Km.sendToParent({mode: 'eos', job: job, pg: pg});}
    Km.close();
  },
//
// bos Begin Of Step ステップ開始記録
//     (<{オプション}>)
  bos: function(op){
    var me=this; op=op||{};
    var job=op.job||Km.Jobname; var pg=op.pg||Km.Pgname;
    var r=Km.putStatus(job, 'bos', op); Km.msglogger(job, '', r);
    if(Km.isDebug){console.log(Km.date('Y/M/D H:I:S ###BOS### ')+Km.Pgname);}
  },
//
// eos End Of Step ステップ終了記録
//      (<{オプション}>)
  eos: function(op){
    op=op||{}; var job=op.job||Km.Jobname; var pg=op.pg||Km.Pgname;
    Km.read('tb_manage', {key: job});
    var r=Km.putStatus(job, 'eos', op); Km.msglogger(job, '', r);
    if(Km.isDebug){console.log(Km.date('Y/M/D H:I:S ###EOS### ')+Km.Pgname);}
  },
//
// stepChecker 再開場所までのチェック
//      (再開ステップ)==>スキップフラグ「trueでスキップ」
  stepChecker: function(step){
    if(!process.argv[2]){return false;}
    if(Km.L3continue){return false;}
    else{
      if(process.argv[2]==step){
        Km.L3continue=true;
        r={}; r.key=Km.L3op.job||Km.Jobname; r.date=Km.date('YMD'); r.bos=Km.date('HIS');
        Km.msglogger('SKIP TO '+step, 'skip', r);
        return false;
      }
      return true;
    }
  },
//
// putStatus ジョブ状態管理レコード更新
//      (ジョブID, 状態, <{オプション}>)
  putStatus: function(job, status, op){
    Km.read('tb_manage', {key: job});
    var r=Km.REC[0]; if(!r){r={};}
    r.key=job; r.date=Km.date('YMD'); r.bos=Km.date('HIS'); r.status=status; r.option=op;
    r.cfg=Km.L3op; r.job=job; r.pg=Km.Pgname; r.step=Km.Stepname;
    Km.REC[0]=r; Km.save('tb_manage');
  },
//######################################
//#                                    #
//# ジョブ実行管理システム             #
//#                                    #
//######################################
  manager: function(){Km.Fiber(function(){
    var me=this; var jobs=[];
    Km.info(); Km.open(); Km.createJobnet();
    Km.on('JOBEVENT', function(){
      Km.read('tb_manage', {key: 'Quenode'});
      while(Km.REC[0].quenode.length>0){
        var rec=Km.REC[0].quenode[0]; Km.REC[0].quenode.shift();
        console.log(rec);
        var key; switch(rec.event){
          case 'endjob': key='job:'+rec.jobid; break;
          case 'file': key='file:'+rec.fn; break;
          case 'message': key='message:'+rec.title+'/'+rec.from; break;
          case 'time': key='time:'+rec.time; break;
          default: key='skip'; break;
        }
        jobs=Km.checkTable(key); for(var i in jobs){Km.stackJob(jobs[i]);}
      }
      Km.rewrite();
    });
    Km.monitorMail(); Km.monitorFiles(); Km.monitorTime();
    Km.cyclic();
  }).run();},
//
// cyclic サイクル実行タイミングポスター
//
  cyclic: function(op){
    var me=this; op=op||{}; op.cycle=op.cycle||me.CFG.manager.cycle; ms=op.cycle*60000;
    var flag=true; while(flag){
      this.sleep(ms); Km.poster({event: 'cyclic', time: this.date('H:I')});
    }
  },
//
// monitorMail メールイベント監視ポスター
//
  monitorMail: function(op){
    var me=this;
    op=op||{}; op.user=op.user||me.CFG.manager.mailuser; op.pass=op.pass||me.CFG.manager.mailpass;
    var auth={user: op.user, pass: op.pass};
    var imap=require('inbox').createConnection(
      false, 'imap.gmail.com', {secureConnection: true, auth: auth}
    );
    imap.on('connect', function(){
      Km.infoLog('IMAP Connected');
      imap.openMailbox('INBOX', function(error){if(error){Km.sevierLog(error, "imap open error");}});
    });
    imap.connect();
    imap.on('new', function(msg){
      Km.Fiber(function(){
        Km.poster({event: 'message', title: msg.title, from: msg.from});
      }).run();
    });
  },
//
// monitorFiles ファイルイベント開始ポスター
//
  monitorFiles: function(){
    var me=this; var a;
    for(var k in me.L3post){a=k.split(':'); if(a[0]=='file'){me.monitorFile(a[1]);}}
    if(me.CFG.manager.monitorFiles){
      me.CFG.manager.monitorFiles.forEach(function(x){me.monitorFile(x);});
    }
  },
  monitorFile: function(fname){
    this.L3event[fname]=require('fs').watch(fname, function(event, fn){
      Km.Fiber(function(){
      if(fn.substr(0, 1)!='.'){
        fn=Km.pullDir(fname)+fn;
        var tp; if(Km.isExist(fn)){tp='update';}else{tp='delete';}
        var stat=Km.stat(fn); var date=stat.mtime;
        Km.poster({event: 'file', file: fn, type: tp, date: date});
      }
      }).run();
    });
  },
//
// monitorTime 時刻監視ポスター
//
  monitorTime: function(){
    var me=this; var a, n, time, t, w;
    for(var k in me.L3post){
      a=Km.separate(k, ':'); Km.L3time=time=a[1];
      if(a[0]=='time'){
        n=(Km.date('H')-0)*60*60000+(Km.date('I')-0)*60000+(Km.date('S')-0)*1000;
        a=time.split(':'); t=(a[0]-0)*60*60000+(a[1]-0)*60000; w=t-n;
        if(w>=0){
          setTimeout(function(){Km.Fiber(function(){
            Km.poster({event: 'time', time: ''});
          }).run();}, w);
          console.log('time', time, w);
        }else{console.log('skip ', time, w);}
      }
    }
  },
//
// poster 通知イベント発生とキュー作成
//
  poster: function(rec){
    Km.read('tb_manage', {key: 'Quenode'}); if(rec.time===''){rec.time=Km.date('H:I');}
    rec=rec||{"event": "error", "message": "no message"};
    if(!Km.REC[0]){Km.REC[0]={};} Km.REC[0].key='Quenode';
    if(Km.REC[0].quenode){Km.REC[0].quenode.push(rec);}
    else{Km.REC[0].quenode=[]; Km.REC[0].quenode[0]=rec;}
    Km.save(Km.REC[0], 'tb_manage');
    Km.fire('JOBEVENT');
  },
//
// stackJob ジョブの起動と監視
//
  stackJob: function(op){
    var me=this;
    try{
      this.Child[op.id]={};
      this.Child[op.id].obj=Chipro.fork(op.apli, op.args);
      console.log('###', process.mainModule.children[0].children);
    }catch(e){console.log(e); this.sevierLog(e, 'プロセス起動不能');}
//
    this.Child[op.id].obj.on('exit', function(code, signal){Km.Fiber(function(){
      Km.poster({'event': 'endjob', 'jobid': op.id});
    }).run();});
//
    try{this.Child[op.id].obj.on('message', function(msg, hand){
      console.log(msg);
    });}
    catch(e){this.sevierLog(e, 'メッセージ受信不能');}
  },
//
// datalogger アプリ作成情報のDB記録
//
  datalogger: function(dt){
    for(var i in dt){
      r={}; r.job=Km.Jobname; r.pg=Km.Pgname; r.date=date('YMDHIS');
      r.dataid=dt[i].dataid; r.count=dt[i].count;
      Km.REC[0]=r;
      Km.save('tb_datalog');
    }
  },
//
// backuplogger バックアップ作成記録
//
  backuplogger: function(file, backupfile, type){
      r={}; r.job=Km.Jobname; r.pg=Km.Pgname; r.date=date('YMDHIS');
      r.file=file; r.backupfile=backupfile; r.type-type;
      Km.REC[0]=r;
      Km.save('tb_backuplog');
  },
//
// msglogger アプリメッセージの記録
//
  msglogger: function(msg, status, r){
    status=status||'normal'; r=r||{};
    r.job=Km.Jobname; r.pg=Km.Pgname; r.step=Km.stepname; r.date=Km.date('YMDHIS');
    r.msg=msg; r.status=status;
    Km.REC[0]=r; Km.save('tb_msglog');
  },
//
//
  invokeTask: function(id, apli, args, op){
    try{this.Child[id]={}; return this.Child[id].obj=Chipro.fork(apli, args, op);}
    catch(e){this.sevierLog(e, 'プロセス起動不能'); return false;}
  },
  waitChild: function(id){
    try{this.Child[id].obj.on('message', function(msg, hand){
      
    });}
    catch(e){this.sevierLog(e, 'メッセージ受信不能');}
  },
  waitParent: function(proc){
    try{process.on('message', function(msg, hand){proc(msg, hand);});}
    catch(e){this.sevierLog(e, 'メッセージ送信不能');}
  },
  sendToChild: function(id, msg, hand){
    try{return this.Child[id].obj.send(msg, hand);}
    catch(e){this.sevierLog(e, 'メッセージ送信不能'); return false;}
  },
  sendToParent: function(msg, hand, chk){
    try{return process.send(msg, hand);}
    catch(e){if(chk){this.sevierLog(e, 'メッセージ送信不能'); return false;}}
  },
//
// checkTable イベント完了テーブルのチェック
//
  checkTable: function(key){
    var me=this; var out=[], rec={};
    if(key!='skip'){if(me.L3post[key]){me.L3post[key].forEach(function(k1){
      flag=true;
      me.L3wait[k1].forEach(function(k2){
        Km.read('tb_manage', {key: k2});
        if(KM.REC[0].complete!='OK'){flag=false; return;}
      });
//      if(flag){out.push(rec);}
    });}}
    return out;
  },
//
// createJobnet ネットワークテーブルの初期化
//
  createJobnet: function(op){
    var me=this; op=op||{}; op.fname=op.fname||me.CFG.manager.config;
    var cfg, post={}, wait={}; var key, evt, i, j;
    var cfg=me.getObject(op.fname, true); if(!cfg){}
    //
    for(var i in cfg){for(var j in cfg[i].wait){
      key=cfg[i].wait[j].event+':'+cfg[i].wait[j].value; evt='job:'+cfg[i].jobid;
      if(!post[key]){post[key]=[];} post[key].push(evt);
    }}
    //
    for(var i in cfg){for(var j in cfg[i].wait){
      key='job:'+cfg[i].jobid; evt=cfg[i].wait[j].event+':'+cfg[i].wait[j].value;
      if(!wait[key]){wait[key]=[];} wait[key].push(evt);
      
    }}
    me.L3wait=wait; me.L3post=post;
  },
//
// createManage 管理テーブルの初期化
//
  createManage: function(op){
    op=op||{}; op.triger=op.triger||'starter';
    Km.read('tb_manage', {key: 'control'});
    Km.REC[0].key='control'; Km.REC[0].date=Km.date('YMD'); Km.REC[0].time=Km.date('HIS');
    Km.REC[0].lastjob='none'; Km.REC[0].triger=op.triger;
    Km.save('tb_manage');
  },
//
  closeManager: function(){}
});
module.exports=Km;
